v 0.0.1
1、棋子 -> 基类
白棋      黑棋

数据：
棋子id
棋子颜色
棋子位置
棋子图片

方法：
放置位置

2、棋盘

数据：
棋局大小（n x n)
棋子数据集合

方法：
绘制棋盘
在位置放置一枚棋子
清空棋盘
判断是否胜利


3、游戏进度控制
数据：
棋盘


方法：
游戏开始
游戏正在进行
游戏结束

v 0.0.2
加入AI
只需要确定下一步该摆放的位置

目前是五子及以上均会判定成功
一、算法：
1、判断我方是否有位置可以直接胜利或者快要胜利了， 有则下在胜利的位置，没有则进入2

2、判断当前对方棋子摆放数，没有，则随机放置在棋盘任意一个位置， 有进入3

3、判断当前对方棋子前面下的棋子位置的各个方向，左右、上下、右上、左上， 判断是不是已经有3颗及以上棋子了，如果是，那么进入4
	不是， 进入5
4、此时需要拦住对方的棋子，这里有几种情况：
1）对方棋子四颗，且有AI棋子拦截， 中间没有空位，此时必须放置第五颗棋子所在位置
2）对方棋子三颗，且没有AI棋子拦截， 中间没有空位，此时必须放置第四颗棋子所在位置（
***容易： 随机取棋盘中两端的位置。
 中：判断两边哪一边下赢的概率更大。    
难：判断两边哪一边下赢的概率更大。往阵型靠   ）
3）对方棋子四颗，且没有AI棋子拦截， 中间是否有空位：
	有：判断该四颗棋子中间空位数， 空位数越小的越优先 
（
	***容易： 空位数越小的越优先 。
 	中：只有1颗的时候返回中间这颗位置或者其他两边随机一个，判定放哪赢的概率大， 其他从空位上逐个判定放哪赢的概率大。
	难：只有1颗的时候返回中间这颗位置或者其他两边随机一个，判定放哪赢的概率大。其他从空位上逐个判定放哪赢的概率大，
	再判定哪个对阵型有利   ）

	没有：直接判定为负
4）对方棋子四颗，且有AI棋子拦截， 中间有空位：
	有：（
	***容易： 空位数越小的越优先 。
 	中：只有1颗的时候返回中间这颗位置或者其他没拦截的随机一个，两颗及以上判定放哪赢的概率大。
	难：只有1颗的时候返回中间这颗位置或者其他没拦截的随机一个，两颗及以上判定放哪赢的概率大。再判定哪个对阵型有利   ）

5）对方棋子三颗，且没有AI棋子拦截， 中间有空位
	有：（
	***容易： 空位数越小的越优先 。
 	中：只有1颗的时候返回中间这颗位置或者其他两边随机一个，判定放哪赢的概率大， 其他从空位上逐个判定放哪赢的概率大。
	难：只有1颗的时候返回中间这颗位置或者其他两边随机一个，判定放哪赢的概率大。其他从空位上逐个判定放哪赢的概率大，
	再判定哪个对阵型有利   ）

5、自身出发，***容易： 随机取棋盘中没有被下过的位置。    中：从自身前面所有已经下的位置出发， 判断哪个方向上的棋子最接近胜利，多个就随机选取一个     难：从自身前面所有已经下的位置出发， 判断哪个方向上的棋子最接近胜利，多个就随机选取一个 ， 设计阵型，每局随机选一个阵型去布局。


二、设计：
AI:
1、在位置列表中能随机出一个位置

棋盘：
1、补充一个获取根据棋子类型获取当前所有棋子的方法
2、补充根据棋子的数量获取到将可以摆放的棋子位置